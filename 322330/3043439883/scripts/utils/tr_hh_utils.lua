local ooooOooooOOoooOOoOoo = require "widgets/image" local oOoOOooOooOOOooooOoo = require "widgets/text" local OooOOoOooooOoooOoOOO = require "widgets/imagebutton" local OOOooOoOoooOoOOooooO = {}  function OOOooOoOoooOoOOooooO:HHCopyTable(orig, copies) copies = copies or {} local OoooOooooOoOOOOOoooo = type(orig) local ooOoooooOoOooooOOooO if OoooOooooOoOOOOOoooo == 'table' then if copies[orig] then ooOoooooOoOooooOOooO = copies[orig] else ooOoooooOoOooooOOooO = {} copies[orig] = ooOoooooOoOooooOOooO for orig_key, orig_value in next, orig, nil do ooOoooooOoOooooOOooO[OOOooOoOoooOoOOooooO:HHCopyTable(orig_key, copies)] = OOOooOoOoooOoOOooooO:HHCopyTable(orig_value, copies) end setmetatable(ooOoooooOoOooooOOooO, OOOooOoOoooOoOOooooO:HHCopyTable(getmetatable(orig), copies)) end else  ooOoooooOoOooooOOooO = orig end return ooOoooooOoOooooOOooO end  function OOOooOoOoooOoOOooooO:HHSay(inst, str) if inst and inst[string.char(0x63,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73)] and inst[string.char(0x63,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73)][string.char(0x74,0x61,0x6c,0x6b,0x65,0x72)] then inst[string.char(0x63,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73)][string.char(0x74,0x61,0x6c,0x6b,0x65,0x72)]:Say(tostring(str)) end end  function OOOooOoOoooOoOOooooO:HasComponents(inst, str) if inst and inst[string.char(0x63,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73)] and inst[string.char(0x63,0x6f,0x6d,0x70,0x6f,0x6e,0x65,0x6e,0x74,0x73)][str] then return true else return false end end function OOOooOoOoooOoOOooooO:HasReplica(inst, str) if inst and inst[string.char(0x72,0x65,0x70,0x6c,0x69,0x63,0x61)] and inst[string.char(0x72,0x65,0x70,0x6c,0x69,0x63,0x61)][str] then return true else return false end end   function OOOooOoOoooOoOOooooO:HHCreateImageUi(father, xml, tex, pos, size_x, size_y, color) local ooooooOOOOoooOOooOoO = father:AddChild(ooooOooooOOoooOOoOoo(xml, tex)) ooooooOOOOoooOOooOoO:SetPosition(pos) if size_x and size_y then ooooooOOOOoooOOooOoO:SetSize(size_x, size_y) end if color and type(color) == 'table' and #color == 0x4 then ooooooOOOOoooOOooOoO:SetTint(color[0x1], color[0x2], color[0x3], color[0x4]) end return ooooooOOOOoooOOooOoO end  function OOOooOoOoooOoOOooooO:HHCreateImageButton(father, xml, tex, pos, scale_x, scale_y, color) local ooooooOOOOoooOOooOoO = father:AddChild(OooOOoOooooOoooOoOOO(xml, tex)) ooooooOOOOoooOOooOoO:SetPosition(pos) ooooooOOOOoooOOooOoO:SetNormalScale(scale_x, scale_y, 0x1) ooooooOOOOoooOOooOoO.focus_scale = { scale_x * 1.1, scale_y * 1.1, 0x1 * 1.1 } if color then ooooooOOOOoooOOooOoO.image:SetTint(color[0x1], color[0x2], color[0x3], color[0x4]) end return ooooooOOOOoooOOooOoO end   function OOOooOoOoooOoOOooooO:HHCreateTextUi(father, pos, str, color, scale, is_left) local OoOOoOoOOoooOoOOOOOo = father:AddChild(oOoOOooOooOOOooooOoo(CODEFONT, scale, "")) OoOOoOoOOoooOoOOOOOo:SetPosition(pos) OoOOoOoOOoooOoOOOOOo:SetString(str) OoOOoOoOOoooOoOOOOOo:SetColour(color or { 0x1, 0x1, 0x1, 0x1 }) if is_left then OoOOoOoOOoooOoOOOOOo:SetHAlign(ANCHOR_LEFT) OoOOoOoOOoooOoOOOOOo:SetVAlign(ANCHOR_MIDDLE) end return OoOOoOoOOoooOoOOOOOo end  function OOOooOoOoooOoOOooooO:HHKillChild(self, key) if self and self[key] then self[key]:Kill() self[key] = nil end end  function OOOooOoOoooOoOOooooO:HHKillTask(self, key) if self and self[key] then self[key]:Cancel() self[key] = nil end end  function OOOooOoOoooOoOOooooO:TableToStr(hh_table) local OOOOoOoOOoOoOoOOOOOo = "{}" local success, oOOOoOOooOoooOoOOooO = pcall(json.encode, hh_table) if success then OOOOoOoOOoOoOoOOOOOo = oOOOoOOooOoooOoOOooO end return OOOOoOoOOoOoOoOOOOOo end  function OOOooOoOoooOoOOooooO:StrToTable(hh_str) local OOOOoOoOOoOoOoOOOOOo = {} local success, oOOOoOOooOoooOoOOooO = pcall(json.decode, hh_str) if success then OOOOoOoOOoOoOoOOOOOo = oOOOoOOooOoooOoOOooO end return OOOOoOoOOoOoOoOOOOOo end  function OOOooOoOoooOoOOooooO:TableSortKeys(hh_table) local oOOOoOOooOoooOoOOooO = {} if type(hh_table) == 'table' then for i, v in pairs(hh_table) do if type(i) == 'string' then table.insert(oOOOoOOooOoooOoOOooO, i) end end end table.sort(oOOOoOOooOoooOoOOooO) return oOOOoOOooOoooOoOOooO end  function OOOooOoOoooOoOOooooO:IsHHType(data, hh_type) if data and type(data) == hh_type then return true end return false end function OOOooOoOoooOoOOooooO:HHServerRpc(player, rpc_name, data)  end  function OOOooOoOoooOoOOooooO:HHClientRpc(player, rpc_name, data) if player and player[string.char(0x75,0x73,0x65,0x72,0x69,0x64)] and player:HasTag(string.char(0x70,0x6c,0x61,0x79,0x65,0x72)) and type(rpc_name) == 'string' then SendModRPCToClient(CLIENT_MOD_RPC[string.char(0x68,0x68,0x5f,0x72,0x70,0x63)][string.char(0x74,0x72,0x5f,0x68,0x68,0x5f,0x72,0x70,0x63,0x5f,0x63,0x6c,0x69,0x65,0x6e,0x74)], player[string.char(0x75,0x73,0x65,0x72,0x69,0x64)], rpc_name, data) end end return OOOooOoOoooOoOOooooO 
